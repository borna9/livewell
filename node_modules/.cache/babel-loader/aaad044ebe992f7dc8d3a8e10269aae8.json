{"ast":null,"code":"function EventHandler(obj, event) {\n  switch (event.target.name) {\n    case \"doRepeat\":\n      obj.setState({\n        doRepeat: event.target.checked\n      });\n      break;\n\n    case \"doDaily\":\n      obj.setState({\n        doDaily: event.target.checked\n      });\n      break;\n\n    case \"showDB\":\n      obj.setState({\n        showDB: event.target.checked\n      });\n      break;\n\n    case \"showLog\":\n      obj.setState({\n        showLOG: event.target.checked\n      });\n      break;\n\n    case \"taskname\":\n      obj.setState({\n        taskName: event.target.value\n      });\n      break;\n\n    case \"notes\":\n      obj.setState({\n        notes: event.target.value\n      });\n      break;\n\n    case \"hrs\":\n      obj.setState({\n        nHrs: event.target.value\n      });\n      break;\n\n    case \"repeattype1\":\n      obj.setState({\n        repeatType: event.target.value\n      });\n      break;\n\n    case \"repintervalamt\":\n      obj.setState({\n        repinterval: event.target.value\n      });\n      break;\n\n    case \"repeatinterval1\":\n      obj.setState({\n        repIntervalType: event.target.value\n      });\n      break;\n\n    default:\n  }\n}\n\n_c = EventHandler;\n\nfunction GetDateString(theDate) {\n  var dt = new Date(theDate);\n  let year = dt.getFullYear().toString();\n  let month = dt.getMonth() + 1;\n  month = month < 10 ? '0' + month : month;\n  let dayOfMonth = dt.getDate() < 10 ? '0' + dt.getDate() : dt.getDate();\n  let str = \"\" + year + \"-\" + month + \"-\" + dayOfMonth;\n  return str;\n}\n\n_c2 = GetDateString;\n\nfunction addDBRecord(obj, base) {\n  console.log(\"SUBMIT:\");\n  console.log(\"  Task name = \", obj.state.taskName);\n  console.log(\"  Tags = \", obj.state.selectedItems);\n  console.log(\"  Priority = \", obj.state.priority);\n  console.log(\"  Number of hours = \", obj.state.nHrs);\n  console.log(\"  Date = \", obj.state.startDate.getFullYear(), \"/\", obj.state.startDate.getMonth() + 1, \"/\", obj.state.startDate.getDate());\n  console.log(\"  Notes = \", obj.state.notes);\n  var theLog = \"SUBMIT:\\n\";\n  theLog = theLog + \"  Task name = \" + obj.state.taskName + \"\\n\";\n  theLog = theLog + \"  Tags = \";\n  var selectedTags = [];\n  obj.state.selectedItems.forEach(item => {\n    theLog = theLog + item.label + \", \";\n    selectedTags.push(item.value);\n  });\n  theLog = theLog + \"\\n\";\n  theLog = theLog + \"  Priority = \" + obj.state.priority.label + \"\\n\";\n  theLog = theLog + \"  Number of hours = \" + obj.state.nHrs + \"\\n\";\n  theLog = theLog + \"  Notes = \" + obj.state.notes + \"\\n\";\n  let newRecord = {\n    \"fields\": {\n      \"Task\": obj.state.taskName,\n      \"Tag\": selectedTags,\n      \"Hrs\": parseFloat(obj.state.nHrs),\n      \"Priority\": obj.state.priority.value,\n      \"Due date\": GetDateString(obj.state.startDate),\n      \"Notes\": obj.state.notes\n    }\n  };\n\n  if (obj.state.doRepeat) {\n    theLog = theLog + \"  Start date = \" + obj.state.startDate.getFullYear() + \"/\" + (obj.state.startDate.getMonth() + 1) + \"/\" + obj.state.startDate.getDate() + \"\\n\";\n    theLog = theLog + \"  End date = \" + obj.state.endDate.getFullYear() + \"/\" + (obj.state.endDate.getMonth() + 1) + \"/\" + obj.state.endDate.getDate() + \"\\n\";\n    var d = new Date(obj.state.startDate);\n\n    switch (obj.state.repeatType) {\n      case \"Daily\":\n        theLog = theLog + \"  Repeat daily:\\n\";\n\n        for (; d <= obj.state.endDate; d.setDate(d.getDate() + 1)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  DAILY\");\n        break;\n\n      case \"Weekly\":\n        theLog = theLog + \"  Repeat weekly:\\n\";\n\n        for (; d <= obj.state.endDate; d.setDate(d.getDate() + 7)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  WEEKLY\");\n        break;\n\n      case \"Monthly\":\n        theLog = theLog + \"  Repeat monthly:\\n\";\n\n        for (; d <= obj.state.endDate; d.setMonth(d.getMonth() + 1)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  MONTHLY\");\n        break;\n\n      case \"Every\":\n        switch (obj.state.repIntervalType) {\n          case \"Days\":\n            theLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" day:\\n\";\n\n            for (; d <= obj.state.endDate; d.setDate(parseInt(d.getDate()) + parseInt(obj.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  DAILY\");\n            break;\n\n          case \"Weeks\":\n            theLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" week:\\n\";\n\n            for (; d <= obj.state.endDate; d.setDate(parseInt(d.getDate()) + 7 * parseInt(obj.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  WEEKLY\");\n            break;\n\n          case \"Months\":\n            theLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" month:\\n\";\n\n            for (; d <= obj.state.endDate; d.setMonth(parseInt(d.getMonth()) + parseInt(obj.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  MONTHLY\");\n            break;\n\n          default:\n            theLog = theLog + \"  *** Bad repeat interval type\";\n            console.log(\"  *** Bad repeat interval type\");\n        }\n\n        console.log(\"  EVERY\");\n        break;\n\n      default:\n        theLog = theLog + \"  *** Bad repeat type\";\n        console.log(\"  *** Bad repeat type\");\n    }\n  } else {\n    theLog = theLog + \"  Date = \" + obj.state.startDate.getFullYear() + \"/\" + (obj.state.startDate.getMonth() + 1) + \"/\" + obj.state.startDate.getDate() + \"\\n\";\n    theLog = theLog + \"\\n\\n\\n\" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n    base('Task List').create([newRecord], function (err, records) {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n\n  obj.setState({\n    logStr: theLog\n  });\n}\n\nfunction SubmitForm(obj, base, tagList) {\n  if (obj.state.doDaily) {\n    var tagDailyRoutine = tagList.find(function (element) {\n      return element.label === \"Daily routine\";\n    });\n    var tagPersonal = tagList.find(function (element) {\n      return element.label === \"Personal\";\n    });\n    var tagFamily = tagList.find(function (element) {\n      return element.label === \"Family\";\n    });\n    var tagExercise = tagList.find(function (element) {\n      return element.label === \"Exercise\";\n    });\n    obj.setState({\n      priority: {\n        value: 'Daily routine',\n        label: 'Daily routine'\n      },\n      notes: ''\n    });\n    obj.setState({\n      taskName: 'Wind down',\n      nHrs: 1.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Sleep',\n      nHrs: 7.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Morning',\n      nHrs: 2.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Lunch',\n      nHrs: 0.5,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Walk',\n      nHrs: 0.5,\n      selectedItems: [tagDailyRoutine, tagFamily, tagExercise]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Dinner',\n      nHrs: 1.5,\n      selectedItems: [tagDailyRoutine, tagFamily]\n    });\n    addDBRecord(obj, base);\n    obj.setState({\n      taskName: 'Evening family',\n      nHrs: 1.0,\n      selectedItems: [tagDailyRoutine, tagFamily]\n    });\n    addDBRecord(obj, base);\n  } else {\n    addDBRecord(obj, base);\n  }\n}\n\n_c3 = SubmitForm;\nexport { EventHandler, SubmitForm };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EventHandler\");\n$RefreshReg$(_c2, \"GetDateString\");\n$RefreshReg$(_c3, \"SubmitForm\");","map":{"version":3,"sources":["/Users/bornan/Sync/Documents/dev/hello/react/livewell/src/eventhandlers.js"],"names":["EventHandler","obj","event","target","name","setState","doRepeat","checked","doDaily","showDB","showLOG","taskName","value","notes","nHrs","repeatType","repinterval","repIntervalType","GetDateString","theDate","dt","Date","year","getFullYear","toString","month","getMonth","dayOfMonth","getDate","str","addDBRecord","base","console","log","state","selectedItems","priority","startDate","theLog","selectedTags","forEach","item","label","push","newRecord","parseFloat","endDate","d","setDate","fields","Task","Tag","Hrs","Priority","Notes","create","err","records","error","setMonth","parseInt","logStr","SubmitForm","tagList","tagDailyRoutine","find","element","tagPersonal","tagFamily","tagExercise"],"mappings":"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","sourcesContent":["function EventHandler(obj, event) {\n\tswitch(event.target.name) {\n\t\tcase \"doRepeat\":\n\t\t\tobj.setState({doRepeat: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"doDaily\":\n\t\t\tobj.setState({doDaily: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"showDB\":\n\t\t\tobj.setState({showDB: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"showLog\":\n\t\t\tobj.setState({showLOG: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"taskname\":\n\t\t\tobj.setState({taskName: event.target.value});\n\t\t\tbreak;\n\t\tcase \"notes\":\n\t\t\tobj.setState({notes: event.target.value});\n\t\t\tbreak;\n\t\tcase \"hrs\":\n\t\t\tobj.setState({nHrs: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repeattype1\":\n\t\t\tobj.setState({repeatType: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repintervalamt\":\n\t\t\tobj.setState({repinterval: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repeatinterval1\":\n\t\t\tobj.setState({repIntervalType: event.target.value});\n\t\t\tbreak;\n\t\tdefault:\n\t}\n}\n\nfunction GetDateString(theDate) {\n\tvar dt = new Date(theDate);\n\tlet year = dt.getFullYear().toString();\n\tlet month = dt.getMonth() + 1;\n\tmonth = month < 10 ? '0' + month : month;\n\tlet dayOfMonth = dt.getDate() < 10 ? '0' + dt.getDate() : dt.getDate();\n\tlet str = \"\"+year+\"-\"+month+\"-\"+dayOfMonth;\n\treturn str;\n}\n\nfunction addDBRecord(obj, base) {\n\tconsole.log(\"SUBMIT:\");\n\tconsole.log(\"  Task name = \", obj.state.taskName);\n\tconsole.log(\"  Tags = \", obj.state.selectedItems);\n\tconsole.log(\"  Priority = \", obj.state.priority);\n\tconsole.log(\"  Number of hours = \", obj.state.nHrs);\n\tconsole.log(\"  Date = \", obj.state.startDate.getFullYear(), \"/\", obj.state.startDate.getMonth()+1, \"/\", obj.state.startDate.getDate());\n\tconsole.log(\"  Notes = \", obj.state.notes);\n\tvar theLog = \"SUBMIT:\\n\";\n\ttheLog = theLog + \"  Task name = \" + obj.state.taskName + \"\\n\";\n\ttheLog = theLog + \"  Tags = \";\n\tvar selectedTags = [];\n\tobj.state.selectedItems.forEach(item => {\n\t\ttheLog = theLog + item.label + \", \";\n\t\tselectedTags.push(item.value);\n\t});\n\ttheLog = theLog + \"\\n\";\n\ttheLog = theLog + \"  Priority = \" + obj.state.priority.label + \"\\n\";\n\ttheLog = theLog + \"  Number of hours = \" + obj.state.nHrs + \"\\n\";\n\ttheLog = theLog + \"  Notes = \" + obj.state.notes + \"\\n\";\n\n\tlet newRecord = {\n\t\t\"fields\": {\n\t\t\t\"Task\": obj.state.taskName,\n\t\t\t\"Tag\": selectedTags,\n\t\t\t\"Hrs\": parseFloat(obj.state.nHrs),\n\t\t\t\"Priority\": obj.state.priority.value,\n\t\t\t\"Due date\": GetDateString(obj.state.startDate),\n\t\t\t\"Notes\": obj.state.notes,\n\t\t}\n\t};\n\tif (obj.state.doRepeat) {\n\t\ttheLog = theLog + \"  Start date = \" + obj.state.startDate.getFullYear() + \"/\" + (obj.state.startDate.getMonth()+1) + \"/\" + obj.state.startDate.getDate() + \"\\n\";\n\t\ttheLog = theLog + \"  End date = \" + obj.state.endDate.getFullYear() + \"/\" + (obj.state.endDate.getMonth()+1) + \"/\" + obj.state.endDate.getDate() + \"\\n\";\n\t\tvar d = new Date(obj.state.startDate); \n\t\tswitch(obj.state.repeatType) {\n\t\t\tcase \"Daily\":\n\t\t\t\ttheLog = theLog + \"  Repeat daily:\\n\";\n\t\t\t\tfor (; d <= obj.state.endDate; d.setDate(d.getDate()+1)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  DAILY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Weekly\":\n\t\t\t\ttheLog = theLog + \"  Repeat weekly:\\n\";\n\t\t\t\tfor (; d <= obj.state.endDate; d.setDate(d.getDate()+7)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  WEEKLY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Monthly\":\n\t\t\t\ttheLog = theLog + \"  Repeat monthly:\\n\";\n\t\t\t\tfor (; d <= obj.state.endDate; d.setMonth(d.getMonth()+1)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  MONTHLY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Every\":\n\t\t\t\tswitch(obj.state.repIntervalType) {\n\t\t\t\t\tcase \"Days\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" day:\\n\";\n\t\t\t\t\t\tfor (; d <= obj.state.endDate; d.setDate(parseInt(d.getDate())+parseInt(obj.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  DAILY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Weeks\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" week:\\n\";\n\t\t\t\t\t\tfor (; d <= obj.state.endDate; d.setDate(parseInt(d.getDate())+7*parseInt(obj.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  WEEKLY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Months\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + obj.state.repinterval.toString() + \" month:\\n\";\n\t\t\t\t\t\tfor (; d <= obj.state.endDate; d.setMonth(parseInt(d.getMonth())+parseInt(obj.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  MONTHLY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttheLog = theLog + \"  *** Bad repeat interval type\";\n\t\t\t\t\t\tconsole.log(\"  *** Bad repeat interval type\");\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  EVERY\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttheLog = theLog + \"  *** Bad repeat type\";\n\t\t\t\tconsole.log(\"  *** Bad repeat type\");\n\t\t}\n\t} else {\n\t\ttheLog = theLog + \"  Date = \" + obj.state.startDate.getFullYear() + \"/\" + (obj.state.startDate.getMonth()+1) + \"/\" + obj.state.startDate.getDate() + \"\\n\";\n\t\ttheLog = theLog + \"\\n\\n\\n\" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\tbase('Task List').create([\n\t\t\tnewRecord,\n\t\t\t], function(err, records) {\n\t\t\tif (err) {\n\t\t\t  console.error(err);\n\t\t\t  return;\n\t\t\t}\n\t\t});\n\t}\n\tobj.setState({ logStr: theLog });\n}\n\n\nfunction SubmitForm(obj, base, tagList) {\n\tif (obj.state.doDaily) {\n\n\t\tvar tagDailyRoutine = tagList.find(function (element) {\n\t\t\treturn element.label === \"Daily routine\";\n\t\t});\n\t\tvar tagPersonal = tagList.find(function (element) {\n\t\t\treturn element.label === \"Personal\";\n\t\t});\n\t\tvar tagFamily = tagList.find(function (element) {\n\t\t\treturn element.label === \"Family\";\n\t\t});\n\t\tvar tagExercise = tagList.find(function (element) {\n\t\t\treturn element.label === \"Exercise\";\n\t\t});\n\t\tobj.setState({\n\t\t\tpriority: { value: 'Daily routine', label: 'Daily routine' },\n\t\t\tnotes: '',\n\t\t});\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Wind down',\n\t\t\tnHrs: 1.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Sleep',\n\t\t\tnHrs: 7.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Morning',\n\t\t\tnHrs: 2.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Lunch',\n\t\t\tnHrs: 0.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Walk',\n\t\t\tnHrs: 0.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily, tagExercise],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Dinner',\n\t\t\tnHrs: 1.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Evening family',\n\t\t\tnHrs: 1.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily],\n\t\t});\n\t\taddDBRecord(obj, base);\n\n\t} else {\n\n\t\taddDBRecord(obj, base);\n\n\t}\n}\n\nexport { EventHandler, SubmitForm };\n\n"]},"metadata":{},"sourceType":"module"}