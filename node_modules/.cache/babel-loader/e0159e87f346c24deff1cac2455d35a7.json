{"ast":null,"code":"const priorities = [{\n  value: 'Low',\n  label: 'Low'\n}, {\n  value: 'Medium',\n  label: 'Medium'\n}, {\n  value: 'High',\n  label: 'High'\n}, {\n  value: 'Time-sensitive',\n  label: 'Time-sensitive'\n}, {\n  value: 'Daily routine',\n  label: 'Daily routine'\n}, {\n  value: 'Urgent',\n  label: 'Urgent'\n}];\n\nconst Airtable = require('airtable');\n\nconst base = new Airtable({\n  apiKey: 'keymrBNLy7tXIfV2H'\n}).base('apptbLLUUnap2S6oD');\n\nconst dbGetTags = theTagList => {\n  tagList = theTagList;\n};\n\nconst getOptions = inputValue => {\n  return tagList.filter(i => i.label.toLowerCase().includes(inputValue.toLowerCase()));\n};\n\nconst loadOptions = (inputValue, callback) => {\n  GetTags(base, dbGetTags);\n  setTimeout(() => {\n    callback(getOptions(inputValue));\n  }, 3000);\n};\n\nexport function GetTags(base, callbackFn) {\n  var recordList = [];\n  base('Tags').select({}).eachPage(function page(records, fetchNextPage) {\n    records.forEach(function (record) {\n      let newRecord = {\n        value: record.id,\n        label: record.get('Name')\n      };\n      recordList.push(newRecord);\n    });\n    fetchNextPage();\n  }, function done(err) {\n    if (err) {\n      console.error(err);\n      return;\n    } else {\n      callbackFn(recordList);\n    }\n  });\n}\n_c = GetTags;\n;\nexport { priorities, base };\n\nvar _c;\n\n$RefreshReg$(_c, \"GetTags\");","map":{"version":3,"sources":["/Users/bornan/Sync/Documents/dev/hello/react/livewell/src/database.js"],"names":["priorities","value","label","Airtable","require","base","apiKey","dbGetTags","theTagList","tagList","getOptions","inputValue","filter","i","toLowerCase","includes","loadOptions","callback","GetTags","setTimeout","callbackFn","recordList","select","eachPage","page","records","fetchNextPage","forEach","record","newRecord","id","get","push","done","err","console","error"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAClB;AAAEC,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CADkB,EAElB;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAFkB,EAGlB;AAAED,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAHkB,EAIlB;AAAED,EAAAA,KAAK,EAAE,gBAAT;AAA2BC,EAAAA,KAAK,EAAE;AAAlC,CAJkB,EAKlB;AAAED,EAAAA,KAAK,EAAE,eAAT;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CALkB,EAMlB;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CANkB,CAAnB;;AASA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,IAAI,GAAG,IAAIF,QAAJ,CAAa;AAACG,EAAAA,MAAM,EAAE;AAAT,CAAb,EAA4CD,IAA5C,CAAiD,mBAAjD,CAAb;;AAEA,MAAME,SAAS,GAAIC,UAAD,IAAgB;AACjCC,EAAAA,OAAO,GAAGD,UAAV;AACA,CAFD;;AAIA,MAAME,UAAU,GAAIC,UAAD,IAAwB;AAC1C,SAAOF,OAAO,CAACG,MAAR,CAAeC,CAAC,IACtBA,CAAC,CAACX,KAAF,CAAQY,WAAR,GAAsBC,QAAtB,CAA+BJ,UAAU,CAACG,WAAX,EAA/B,CADM,CAAP;AAGA,CAJD;;AAMA,MAAME,WAAW,GAAG,CAACL,UAAD,EAAaM,QAAb,KAA0B;AAC7CC,EAAAA,OAAO,CAACb,IAAD,EAAOE,SAAP,CAAP;AACAY,EAAAA,UAAU,CAAC,MAAM;AAChBF,IAAAA,QAAQ,CAACP,UAAU,CAACC,UAAD,CAAX,CAAR;AACA,GAFS,EAEP,IAFO,CAAV;AAGA,CALD;;AAOA,OAAO,SAASO,OAAT,CAAiBb,IAAjB,EAAuBe,UAAvB,EAAmC;AACzC,MAAIC,UAAU,GAAG,EAAjB;AACAhB,EAAAA,IAAI,CAAC,MAAD,CAAJ,CAAaiB,MAAb,CAAoB,EAApB,EACGC,QADH,CACY,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACjDD,IAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAChC,UAAIC,SAAS,GAAG;AAAE5B,QAAAA,KAAK,EAAE2B,MAAM,CAACE,EAAhB;AAAoB5B,QAAAA,KAAK,EAAE0B,MAAM,CAACG,GAAP,CAAW,MAAX;AAA3B,OAAhB;AACAV,MAAAA,UAAU,CAACW,IAAX,CAAgBH,SAAhB;AACA,KAHD;AAIAH,IAAAA,aAAa;AACb,GAPD,EAOG,SAASO,IAAT,CAAcC,GAAd,EAAmB;AACrB,QAAIA,GAAJ,EAAS;AAAEC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AAAoB;AAAS,KAAxC,MAA8C;AAC7Cd,MAAAA,UAAU,CAACC,UAAD,CAAV;AACA;AACD,GAXD;AAYA;KAdeH,O;AAcf;AAED,SAASlB,UAAT,EAAqBK,IAArB","sourcesContent":["const priorities = [\n\t{ value: 'Low', label: 'Low' },\n\t{ value: 'Medium', label: 'Medium' },\n\t{ value: 'High', label: 'High' },\n\t{ value: 'Time-sensitive', label: 'Time-sensitive' },\n\t{ value: 'Daily routine', label: 'Daily routine' },\n\t{ value: 'Urgent', label: 'Urgent' },\n];\n\nconst Airtable = require('airtable');\nconst base = new Airtable({apiKey: 'keymrBNLy7tXIfV2H'}).base('apptbLLUUnap2S6oD');\n\nconst dbGetTags = (theTagList) => {\n\ttagList = theTagList;\n};\n\nconst getOptions = (inputValue: string) => {\n\treturn tagList.filter(i =>\n\t\ti.label.toLowerCase().includes(inputValue.toLowerCase())\n\t);\n};\n\nconst loadOptions = (inputValue, callback) => {\n\tGetTags(base, dbGetTags);\n\tsetTimeout(() => {\n\t\tcallback(getOptions(inputValue));\n\t}, 3000);\n};\n\nexport function GetTags(base, callbackFn) {\n\tvar recordList = [];\n\tbase('Tags').select({\n\t}).eachPage(function page(records, fetchNextPage) {\n\t\trecords.forEach(function(record) {\n\t\t\tlet newRecord = { value: record.id, label: record.get('Name') };\n\t\t\trecordList.push(newRecord);\n\t\t});\n\t\tfetchNextPage();\n\t}, function done(err) {\n\t\tif (err) { console.error(err); return; } else {\n\t\t\tcallbackFn(recordList);\n\t\t}\n\t});\n};\n\nexport { priorities, base };\n"]},"metadata":{},"sourceType":"module"}