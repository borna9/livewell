{"ast":null,"code":"function EventHandler(obj, event) {\n  switch (event.target.name) {\n    case \"doRepeat\":\n      obj.setState({\n        doRepeat: event.target.checked\n      });\n      break;\n\n    case \"doDaily\":\n      obj.setState({\n        doDaily: event.target.checked\n      });\n      break;\n\n    case \"showDB\":\n      obj.setState({\n        showDB: event.target.checked\n      });\n      break;\n\n    case \"showLog\":\n      obj.setState({\n        showLOG: event.target.checked\n      });\n      break;\n\n    case \"taskname\":\n      obj.setState({\n        taskName: event.target.value\n      });\n      break;\n\n    case \"notes\":\n      obj.setState({\n        notes: event.target.value\n      });\n      break;\n\n    case \"hrs\":\n      obj.setState({\n        nHrs: event.target.value\n      });\n      break;\n\n    case \"repeattype1\":\n      obj.setState({\n        repeatType: event.target.value\n      });\n      break;\n\n    case \"repintervalamt\":\n      obj.setState({\n        repinterval: event.target.value\n      });\n      break;\n\n    case \"repeatinterval1\":\n      obj.setState({\n        repIntervalType: event.target.value\n      });\n      break;\n\n    default:\n  }\n}\n\n_c = EventHandler;\n\nfunction addDBRecord(obj) {\n  console.log(\"SUBMIT:\");\n  console.log(\"  Task name = \", this.state.taskName);\n  console.log(\"  Tags = \", this.state.selectedItems);\n  console.log(\"  Priority = \", this.state.priority);\n  console.log(\"  Number of hours = \", this.state.nHrs);\n  console.log(\"  Date = \", this.state.startDate.getFullYear(), \"/\", this.state.startDate.getMonth() + 1, \"/\", this.state.startDate.getDate());\n  console.log(\"  Notes = \", this.state.notes);\n  var theLog = \"SUBMIT:\\n\";\n  theLog = theLog + \"  Task name = \" + this.state.taskName + \"\\n\";\n  theLog = theLog + \"  Tags = \";\n  var selectedTags = [];\n  this.state.selectedItems.forEach(item => {\n    theLog = theLog + item.label + \", \";\n    selectedTags.push(item.value);\n  });\n  theLog = theLog + \"\\n\";\n  theLog = theLog + \"  Priority = \" + this.state.priority.label + \"\\n\";\n  theLog = theLog + \"  Number of hours = \" + this.state.nHrs + \"\\n\";\n  theLog = theLog + \"  Notes = \" + this.state.notes + \"\\n\";\n  let newRecord = {\n    \"fields\": {\n      \"Task\": this.state.taskName,\n      \"Tag\": selectedTags,\n      \"Hrs\": parseFloat(this.state.nHrs),\n      \"Priority\": this.state.priority.value,\n      \"Due date\": GetDateString(this.state.startDate),\n      \"Notes\": this.state.notes\n    }\n  };\n\n  if (this.state.doRepeat) {\n    theLog = theLog + \"  Start date = \" + this.state.startDate.getFullYear() + \"/\" + (this.state.startDate.getMonth() + 1) + \"/\" + this.state.startDate.getDate() + \"\\n\";\n    theLog = theLog + \"  End date = \" + this.state.endDate.getFullYear() + \"/\" + (this.state.endDate.getMonth() + 1) + \"/\" + this.state.endDate.getDate() + \"\\n\";\n    var d = new Date(this.state.startDate);\n\n    switch (this.state.repeatType) {\n      case \"Daily\":\n        theLog = theLog + \"  Repeat daily:\\n\";\n\n        for (; d <= this.state.endDate; d.setDate(d.getDate() + 1)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  DAILY\");\n        break;\n\n      case \"Weekly\":\n        theLog = theLog + \"  Repeat weekly:\\n\";\n\n        for (; d <= this.state.endDate; d.setDate(d.getDate() + 7)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  WEEKLY\");\n        break;\n\n      case \"Monthly\":\n        theLog = theLog + \"  Repeat monthly:\\n\";\n\n        for (; d <= this.state.endDate; d.setMonth(d.getMonth() + 1)) {\n          newRecord.fields['Due date'] = GetDateString(d);\n          theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n          base('Task List').create([newRecord], function (err, records) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          });\n        }\n\n        console.log(\"  MONTHLY\");\n        break;\n\n      case \"Every\":\n        switch (this.state.repIntervalType) {\n          case \"Days\":\n            theLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" day:\\n\";\n\n            for (; d <= this.state.endDate; d.setDate(parseInt(d.getDate()) + parseInt(this.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  DAILY\");\n            break;\n\n          case \"Weeks\":\n            theLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" week:\\n\";\n\n            for (; d <= this.state.endDate; d.setDate(parseInt(d.getDate()) + 7 * parseInt(this.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  WEEKLY\");\n            break;\n\n          case \"Months\":\n            theLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" month:\\n\";\n\n            for (; d <= this.state.endDate; d.setMonth(parseInt(d.getMonth()) + parseInt(this.state.repinterval))) {\n              newRecord.fields['Due date'] = GetDateString(d);\n              theLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n              base('Task List').create([newRecord], function (err, records) {\n                if (err) {\n                  console.error(err);\n                  return;\n                }\n              });\n            }\n\n            console.log(\"  MONTHLY\");\n            break;\n\n          default:\n            theLog = theLog + \"  *** Bad repeat interval type\";\n            console.log(\"  *** Bad repeat interval type\");\n        }\n\n        console.log(\"  EVERY\");\n        break;\n\n      default:\n        theLog = theLog + \"  *** Bad repeat type\";\n        console.log(\"  *** Bad repeat type\");\n    }\n  } else {\n    theLog = theLog + \"  Date = \" + this.state.startDate.getFullYear() + \"/\" + (this.state.startDate.getMonth() + 1) + \"/\" + this.state.startDate.getDate() + \"\\n\";\n    theLog = theLog + \"\\n\\n\\n\" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n    base('Task List').create([newRecord], function (err, records) {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n\n  this.setState({\n    logStr: theLog\n  });\n}\n\nfunction SubmitForm(obj, tagList) {\n  if (obj.state.doDaily) {\n    var tagDailyRoutine = tagList.find(function (element) {\n      return element.label === \"Daily routine\";\n    });\n    var tagPersonal = tagList.find(function (element) {\n      return element.label === \"Personal\";\n    });\n    var tagFamily = tagList.find(function (element) {\n      return element.label === \"Family\";\n    });\n    var tagExercise = tagList.find(function (element) {\n      return element.label === \"Exercise\";\n    });\n    obj.setState({\n      priority: {\n        value: 'Daily routine',\n        label: 'Daily routine'\n      },\n      notes: ''\n    });\n    obj.setState({\n      taskName: 'Wind down',\n      nHrs: 1.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Sleep',\n      nHrs: 7.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Morning',\n      nHrs: 2.0,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Lunch',\n      nHrs: 0.5,\n      selectedItems: [tagDailyRoutine, tagPersonal]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Walk',\n      nHrs: 0.5,\n      selectedItems: [tagDailyRoutine, tagFamily, tagExercise]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Dinner',\n      nHrs: 1.5,\n      selectedItems: [tagDailyRoutine, tagFamily]\n    });\n    obj.addDBRecord();\n    obj.setState({\n      taskName: 'Evening family',\n      nHrs: 1.0,\n      selectedItems: [tagDailyRoutine, tagFamily]\n    });\n    obj.addDBRecord();\n  } else {\n    obj.addDBRecord();\n  }\n}\n\n_c2 = SubmitForm;\nexport { EventHandler, SubmitForm };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EventHandler\");\n$RefreshReg$(_c2, \"SubmitForm\");","map":{"version":3,"sources":["/Users/bornan/Sync/Documents/dev/hello/react/livewell/src/eventhandlers.js"],"names":["EventHandler","obj","event","target","name","setState","doRepeat","checked","doDaily","showDB","showLOG","taskName","value","notes","nHrs","repeatType","repinterval","repIntervalType","addDBRecord","console","log","state","selectedItems","priority","startDate","getFullYear","getMonth","getDate","theLog","selectedTags","forEach","item","label","push","newRecord","parseFloat","GetDateString","endDate","d","Date","setDate","fields","Task","Tag","Hrs","Priority","Notes","base","create","err","records","error","setMonth","toString","parseInt","logStr","SubmitForm","tagList","tagDailyRoutine","find","element","tagPersonal","tagFamily","tagExercise"],"mappings":"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","sourcesContent":["function EventHandler(obj, event) {\n\tswitch(event.target.name) {\n\t\tcase \"doRepeat\":\n\t\t\tobj.setState({doRepeat: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"doDaily\":\n\t\t\tobj.setState({doDaily: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"showDB\":\n\t\t\tobj.setState({showDB: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"showLog\":\n\t\t\tobj.setState({showLOG: event.target.checked});\n\t\t\tbreak;\n\t\tcase \"taskname\":\n\t\t\tobj.setState({taskName: event.target.value});\n\t\t\tbreak;\n\t\tcase \"notes\":\n\t\t\tobj.setState({notes: event.target.value});\n\t\t\tbreak;\n\t\tcase \"hrs\":\n\t\t\tobj.setState({nHrs: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repeattype1\":\n\t\t\tobj.setState({repeatType: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repintervalamt\":\n\t\t\tobj.setState({repinterval: event.target.value});\n\t\t\tbreak;\n\t\tcase \"repeatinterval1\":\n\t\t\tobj.setState({repIntervalType: event.target.value});\n\t\t\tbreak;\n\t\tdefault:\n\t}\n}\n\n\nfunction addDBRecord(obj) {\n\tconsole.log(\"SUBMIT:\");\n\tconsole.log(\"  Task name = \", this.state.taskName);\n\tconsole.log(\"  Tags = \", this.state.selectedItems);\n\tconsole.log(\"  Priority = \", this.state.priority);\n\tconsole.log(\"  Number of hours = \", this.state.nHrs);\n\tconsole.log(\"  Date = \", this.state.startDate.getFullYear(), \"/\", this.state.startDate.getMonth()+1, \"/\", this.state.startDate.getDate());\n\tconsole.log(\"  Notes = \", this.state.notes);\n\tvar theLog = \"SUBMIT:\\n\";\n\ttheLog = theLog + \"  Task name = \" + this.state.taskName + \"\\n\";\n\ttheLog = theLog + \"  Tags = \";\n\tvar selectedTags = [];\n\tthis.state.selectedItems.forEach(item => {\n\t\ttheLog = theLog + item.label + \", \";\n\t\tselectedTags.push(item.value);\n\t});\n\ttheLog = theLog + \"\\n\";\n\ttheLog = theLog + \"  Priority = \" + this.state.priority.label + \"\\n\";\n\ttheLog = theLog + \"  Number of hours = \" + this.state.nHrs + \"\\n\";\n\ttheLog = theLog + \"  Notes = \" + this.state.notes + \"\\n\";\n\n\tlet newRecord = {\n\t\t\"fields\": {\n\t\t\t\"Task\": this.state.taskName,\n\t\t\t\"Tag\": selectedTags,\n\t\t\t\"Hrs\": parseFloat(this.state.nHrs),\n\t\t\t\"Priority\": this.state.priority.value,\n\t\t\t\"Due date\": GetDateString(this.state.startDate),\n\t\t\t\"Notes\": this.state.notes,\n\t\t}\n\t};\n\tif (this.state.doRepeat) {\n\t\ttheLog = theLog + \"  Start date = \" + this.state.startDate.getFullYear() + \"/\" + (this.state.startDate.getMonth()+1) + \"/\" + this.state.startDate.getDate() + \"\\n\";\n\t\ttheLog = theLog + \"  End date = \" + this.state.endDate.getFullYear() + \"/\" + (this.state.endDate.getMonth()+1) + \"/\" + this.state.endDate.getDate() + \"\\n\";\n\t\tvar d = new Date(this.state.startDate); \n\t\tswitch(this.state.repeatType) {\n\t\t\tcase \"Daily\":\n\t\t\t\ttheLog = theLog + \"  Repeat daily:\\n\";\n\t\t\t\tfor (; d <= this.state.endDate; d.setDate(d.getDate()+1)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  DAILY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Weekly\":\n\t\t\t\ttheLog = theLog + \"  Repeat weekly:\\n\";\n\t\t\t\tfor (; d <= this.state.endDate; d.setDate(d.getDate()+7)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  WEEKLY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Monthly\":\n\t\t\t\ttheLog = theLog + \"  Repeat monthly:\\n\";\n\t\t\t\tfor (; d <= this.state.endDate; d.setMonth(d.getMonth()+1)) {\n\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t  return;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  MONTHLY\");\n\t\t\t\tbreak;\n\t\t\tcase \"Every\":\n\t\t\t\tswitch(this.state.repIntervalType) {\n\t\t\t\t\tcase \"Days\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" day:\\n\";\n\t\t\t\t\t\tfor (; d <= this.state.endDate; d.setDate(parseInt(d.getDate())+parseInt(this.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  DAILY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Weeks\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" week:\\n\";\n\t\t\t\t\t\tfor (; d <= this.state.endDate; d.setDate(parseInt(d.getDate())+7*parseInt(this.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  WEEKLY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Months\":\n\t\t\t\t\t\ttheLog = theLog + \"  Repeat every \" + this.state.repinterval.toString() + \" month:\\n\";\n\t\t\t\t\t\tfor (; d <= this.state.endDate; d.setMonth(parseInt(d.getMonth())+parseInt(this.state.repinterval))) {\n\t\t\t\t\t\t\tnewRecord.fields['Due date'] = GetDateString(d);\n\t\t\t\t\t\t\ttheLog = theLog + \"    \" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\t\t\t\t\t\tbase('Task List').create([\n\t\t\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\t\t\t], function(err, records) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t  console.error(err);\n\t\t\t\t\t\t\t\t  return;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(\"  MONTHLY\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttheLog = theLog + \"  *** Bad repeat interval type\";\n\t\t\t\t\t\tconsole.log(\"  *** Bad repeat interval type\");\n\t\t\t\t}\n\t\t\t\tconsole.log(\"  EVERY\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttheLog = theLog + \"  *** Bad repeat type\";\n\t\t\t\tconsole.log(\"  *** Bad repeat type\");\n\t\t}\n\t} else {\n\t\ttheLog = theLog + \"  Date = \" + this.state.startDate.getFullYear() + \"/\" + (this.state.startDate.getMonth()+1) + \"/\" + this.state.startDate.getDate() + \"\\n\";\n\t\ttheLog = theLog + \"\\n\\n\\n\" + newRecord.fields.Task + \" | \" + newRecord.fields.Tag + \" | \" + newRecord.fields.Hrs + \" | \" + newRecord.fields.Priority + \" | \" + newRecord.fields['Due date'] + \" | \" + newRecord.fields.Notes + \"\\n\";\n\t\tbase('Task List').create([\n\t\t\tnewRecord,\n\t\t\t], function(err, records) {\n\t\t\tif (err) {\n\t\t\t  console.error(err);\n\t\t\t  return;\n\t\t\t}\n\t\t});\n\t}\n\tthis.setState({ logStr: theLog });\n}\n\n\nfunction SubmitForm(obj, tagList) {\n\tif (obj.state.doDaily) {\n\n\t\tvar tagDailyRoutine = tagList.find(function (element) {\n\t\t\treturn element.label === \"Daily routine\";\n\t\t});\n\t\tvar tagPersonal = tagList.find(function (element) {\n\t\t\treturn element.label === \"Personal\";\n\t\t});\n\t\tvar tagFamily = tagList.find(function (element) {\n\t\t\treturn element.label === \"Family\";\n\t\t});\n\t\tvar tagExercise = tagList.find(function (element) {\n\t\t\treturn element.label === \"Exercise\";\n\t\t});\n\t\tobj.setState({\n\t\t\tpriority: { value: 'Daily routine', label: 'Daily routine' },\n\t\t\tnotes: '',\n\t\t});\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Wind down',\n\t\t\tnHrs: 1.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Sleep',\n\t\t\tnHrs: 7.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Morning',\n\t\t\tnHrs: 2.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Lunch',\n\t\t\tnHrs: 0.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagPersonal],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Walk',\n\t\t\tnHrs: 0.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily, tagExercise],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Dinner',\n\t\t\tnHrs: 1.5,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t\tobj.setState({\n\t\t\ttaskName: 'Evening family',\n\t\t\tnHrs: 1.0,\n\t\t\tselectedItems: [tagDailyRoutine, tagFamily],\n\t\t});\n\t\tobj.addDBRecord();\n\n\t} else {\n\n\t\tobj.addDBRecord();\n\n\t}\n}\n\nexport { EventHandler, SubmitForm };\n\n"]},"metadata":{},"sourceType":"module"}